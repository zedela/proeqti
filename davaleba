<<<<<<<<<<<<<<<<<<TAMASHI>>>>>>>>>>>>>>>>>
__________________________________________________________________
import random


class Character:
    def __init__(self, name, health, attack_power):
        self._name = name
        self._health = health
        self._attack_power = attack_power

    @property
    def name(self):
        return self._name

    @property
    def health(self):
        return self._health

    @health.setter
    def health(self, value):
        self._health = value

    @property
    def attack_power(self):
        return self._attack_power

    def attack(self, opponent):
        damage = random.randint(1, self._attack_power)
        opponent.health -= damage
        print(f"{self._name} attacks {opponent.name} for {damage} damage!")

    def __str__(self):
        return f"{self._name} (Health: {self._health}, Attack Power: {self._attack_power})"


class Player(Character):
    def __init__(self, name, health, attack_power, gold=0):
        super().__init__(name, health, attack_power)
        self._gold = gold

    @property
    def gold(self):
        return self._gold

    def collect_gold(self, amount):
        self._gold += amount
        print(f"{self._name} has collected {amount} gold!")

    def __str__(self):
        return f"{super().__str__()} (Gold: {self._gold})"


class Enemy(Character):
    def __init__(self, name, health, attack_power, gold_reward):
        super().__init__(name, health, attack_power)
        self._gold_reward = gold_reward

    def defeated(self):
        print(f"{self._name} is defeated!")
        return self._gold_reward

    def __str__(self):
        return f"{super().__str__()} (Gold Reward: {self._gold_reward})"


class Game:
    def __init__(self, player_name, player_health, player_attack_power):
        self._player = Player(player_name, player_health, player_attack_power)
        self._enemies = []

    def add_enemy(self, enemy):
        self._enemies.append(enemy)

    def play(self):
        print(f"Welcome, {self._player.name}!")
        while self._enemies:
            enemy = random.choice(self._enemies)
            print(f"A wild {enemy.name} appears!")
            while self._player.health > 0 and enemy.health > 0:
                self._player.attack(enemy)
                if enemy.health <= 0:
                    gold_reward = enemy.defeated()
                    self._player.collect_gold(gold_reward)
                    break
                enemy.attack(self._player)
            if self._player.health <= 0:
                print(f"{self._player.name} has been defeated!\nGame over.")
                return
            self._enemies.remove(enemy)
        print(
            f"Congratulations, {self._player.name}! You have defeated all enemies and won the game with {self._player.gold} gold.")


player = Player(name="Denji", health=30, attack_power=20, gold=0)
enemy_1 = Enemy(name="Goblin", health=30, attack_power=10, gold_reward=10)
enemy_2 = Enemy(name="Dagon", health=40, attack_power=25, gold_reward=50)

game = Game(player_name="Denji", player_health=30, player_attack_power=20)
game.add_enemy(enemy_1)
game.add_enemy(enemy_2)
game.play()
_______________________________________________________________________________________________________________________________________________________________________
<<<<<<<<<<<<<<<<<<<<<<<<<<PIRVELI AARASHEFASEBADI>>>>>>>>>>>>>>>>>
<1>
class Vehicle:
    def __init__(self, max_speed, mileage):
        self.max_speed = max_speed
        self.mileage = mileage 

car = Vehicle(max_speed=120, mileage=50000)


print(car.max_speed)   # Output: 120
print(car.mileage)     # Output: 50000
________________________________________________ 

<2>
class Book:
    def __init__(self, title, author, publisher):
        self._title = title
        self._author = author
        self._publisher = publisher 

    @property
    def title(self):
        return self._title
    
    @title.setter
    def title(self, value):
        self._title = value 

    @property
    def author(self):
        return self._author
    
    @author.setter
    def author(self, value):
        self._author = value 

    @property
    def publisher(self):
        return self._publisher
    
    @publisher.setter
    def publisher(self, value):
        self._publisher = value 

    def __str__(self):
        return f"{self._title}, {self._author}, {self._publisher}" 

book = Book("The Catcher in the Rye", "J.D. Salinger", "Little, Brown and Company")
print(book) 
________________________________________________ 

<3>
class Dog:
    def __init__(self, name, age, breed='Unknown'):
        self.__name = name
        self.__breed = breed
        self.__age = age
    
    @property
    def name(self):
        return self.__name
    
    @name.setter
    def name(self, name):
        self.__name = name
    
    @property
    def breed(self):
        return self.__breed
    
    @breed.setter
    def breed(self, breed):
        self.__breed = breed
    
    @property
    def age(self):
        return self.__age
    
    @age.setter
    def age(self, age):
        self.__age = age
    
    def __str__(self):
        return f"{self.__name}, {self.__breed}, {self.__age}"
    
    def bark(self):
        print("Woof!")
    
    def sit(self):
        print(f"{self.__name} is now sitting.")
    
    def roll_over(self):
        print(f"{self.__name} rolled over!")
my_dog = Dog("Buddy", 3, "Golden Retriever")
print(my_dog)  # Output: Buddy, Golden Retriever, 3 

my_dog.bark()  # Output: Woof! 

my_dog.sit()  # Output: Buddy is now sitting. 

my_dog.roll_over()  # Output: Buddy rolled over!


my_dog.age = 5
print(my_dog.age)  # Output: 5
________________________________________________ 

<4>
import random 

class Dice:
    def __init__(self, sides=6):
        self._sides = self.validate(sides)
    
    @staticmethod
    def validate(sides):
        if sides < 2 or sides > 144:
            raise ValueError("Dice sides should be between 2 and 144.")
        return sides
    
    def roll(self):
        return random.randint(1, self._sides)


while True:
    dice_type = input("Enter the type of dice you want to roll (e.g. D6, D12): ")
    try:
        num_sides = int(dice_type[1:])
        dice = Dice(num_sides)
        print("You rolled:", dice.roll())
    except ValueError as e:
        print("Error:", e)
    except:
        print("Invalid input.")
    finally:
        play_again = input("Do you want to roll again? (y/n): ")
        if play_again.lower() != 'y':
            break
_______________________________________________________________________________________________________________________________________________________________________
<<<<<<<<<<<<<<<<<<<<<<MEORE ARASHEFASEBADI>>>>>>>>>>>>>>>>>>>>>>>>>
<1>
class Shape:
    def area(self):
        pass

    def perimeter(self):
        pass


class Circle(Shape):
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        self._radius = value

    def area(self):
        return 3.141592653589793 * self._radius ** 2

    def perimeter(self):
        return 2 * 3.141592653589793 * self._radius


class Square(Shape):
    def __init__(self, side_length):
        self._side_length = side_length

    @property
    def side_length(self):
        return self._side_length

    @side_length.setter
    def side_length(self, value):
        self._side_length = value

    def area(self):
        return self._side_length ** 2

    def perimeter(self):
        return 4 * self._side_length
__________________________________________


<2>
class Vehicle:
    def __init__(self, make, model, year):
        self._make = make
        self._model = model
        self._year = year
   
    @property
    def make(self):
        return self._make
   
    @property
    def model(self):
        return self._model
   
    @property
    def year(self):
        return self._year


class Car(Vehicle):
    def __init__(self, make, model, year, num_wheels, num_doors):
        super().__init__(make, model, year)
        self._num_wheels = num_wheels
        self._num_doors = num_doors
   
    @property
    def num_wheels(self):
        return self._num_wheels
   
    @property
    def num_doors(self):
        return self._num_doors


class ElectricCar(Car):
    def __init__(self, make, model, year, num_wheels, num_doors, battery_size, charge_time):
        super().__init__(make, model, year, num_wheels, num_doors)
        self._battery_size = battery_size
        self._charge_time = charge_time
   
    @property
    def battery_size(self):
        return self._battery_size
   
    @property
    def charge_time(self):
        return self._charge_time
_______________________________________________

<3>
class Animal:
    def eat(self):
        print("Nom nom nom")
   
    def sleep(self):
        print("Zzzzzzzzz")

class Cage:
    def __init__(self):
        self._animals = []
       
    def get_animals(self):
        return self._animals
   
    def add_animal(self, animal):
        self._animals.append(animal)
       

class ZooKeeper:
    def feed_animals(self, cage):
        animals = cage.get_animals()
        for animal in animals:
            animal.eat()
   
    def tend_to_animals(self, cage):
        animals = cage.get_animals()
        for animal in animals:
            animal.sleep()
           
    def add_animal(self, cage, animal):
        cage.add_animal(animal)

class PettingZooKeeper(ZooKeeper):
    def pet_animals(self, cage):
        animals = cage.get_animals()
        for animal in animals:
            print("Petting", end=" ")
            animal.sleep()
   
    def add_animal(self, cage, animal):
        raise NotImplementedError("PettingZooKeeper cannot add an animal to a cage")
